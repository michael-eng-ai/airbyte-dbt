version: '3.8'

services:
  postgres_source:
    image: postgres:13
    container_name: postgres_source_db
    ports:
      - "5430:5432" # Porta diferente para não conflitar com outros postgres locais
    environment:
      POSTGRES_USER: ${POSTGRES_SOURCE_USER:-user_source}
      POSTGRES_PASSWORD: ${POSTGRES_SOURCE_PASSWORD:-password_source}
      POSTGRES_DB: ${POSTGRES_SOURCE_DB:-db_source}
    volumes:
      - postgres_source_data:/var/lib/postgresql/data
      - ./postgres_init_scripts:/docker-entrypoint-initdb.d # Scripts para criar schema, tabelas e popular dados
      - ./postgres_init_scripts/postgresql-cdc.conf:/etc/postgresql/postgresql.conf # Configurações CDC
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"] # Usar nossas configurações
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_SOURCE_USER:-user_source} -d ${POSTGRES_SOURCE_DB:-db_source}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Script de preenchimento do banco para testar CDC
  db_populator:
    build:
      context: ./scripts
      dockerfile: Dockerfile
    container_name: db_populator
    depends_on:
      postgres_source:
        condition: service_healthy # Aguarda o banco estar saudável
    environment:
      DB_HOST: postgres_source_db
      DB_NAME: ${POSTGRES_SOURCE_DB:-db_source}
      DB_USER: ${POSTGRES_SOURCE_USER:-user_source}
      DB_PASSWORD: ${POSTGRES_SOURCE_PASSWORD:-password_source}
      DB_PORT: "5432"
    volumes:
      - ./scripts:/app/scripts
    command: ["python", "/app/scripts/populate_db.py"]
    # Para teste contínuo, você poderia usar um script que executa periodicamente
    # Por exemplo: ["sh", "-c", "while true; do python /app/scripts/populate_db.py; sleep 3600; done"]

  # Airbyte Services
  airbyte-db:
    image: airbyte/db:${AIRBYTE_VERSION:-0.50.46}
    container_name: airbyte_db
    environment:
      - POSTGRES_USER=${AIRBYTE_DB_USER:-docker}
      - POSTGRES_PASSWORD=${AIRBYTE_DB_PASSWORD:-docker}
      - POSTGRES_DB=${AIRBYTE_DB_NAME:-airbyte}
    volumes:
      - airbyte_db_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${AIRBYTE_DB_USER:-docker}"]
      interval: 10s
      timeout: 5s
      retries: 5

  airbyte-temporal:
    image: airbyte/temporal:${AIRBYTE_VERSION:-0.50.46}
    container_name: airbyte_temporal
    depends_on:
      airbyte-db:
        condition: service_healthy
    ports:
      - "7233:7233"
    environment:
      - DB=postgresql
      - POSTGRES_USER=${AIRBYTE_DB_USER:-docker}
      - POSTGRES_PASSWORD=${AIRBYTE_DB_PASSWORD:-docker}
      - POSTGRES_HOST=airbyte-db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${AIRBYTE_DB_NAME:-airbyte}
    volumes:
      - airbyte_temporal_data:/var/lib/temporal
    restart: unless-stopped

  airbyte-server:
    image: airbyte/server:${AIRBYTE_VERSION:-0.50.46}
    container_name: airbyte_server
    depends_on:
      airbyte-db:
        condition: service_healthy
      airbyte-temporal:
        condition: service_started
    ports:
      - "8000:8000" # Porta do servidor Airbyte API
    environment:
      - DATABASE_USER=${AIRBYTE_DB_USER:-docker}
      - DATABASE_PASSWORD=${AIRBYTE_DB_PASSWORD:-docker}
      - DATABASE_HOST=airbyte-db
      - DATABASE_PORT=5432
      - DATABASE_DB=${AIRBYTE_DB_NAME:-airbyte}
      - TEMPORAL_HOST=airbyte-temporal:7233
      - CONFIG_ROOT=/configs
      - WORKSPACE_ROOT=/workspace
      - WORKER_ENVIRONMENT=docker
    volumes:
      - airbyte_configs:/configs
      - airbyte_workspace:/workspace
    restart: unless-stopped

  airbyte-webapp:
    image: airbyte/webapp:${AIRBYTE_VERSION:-0.50.46}
    container_name: airbyte_webapp
    depends_on:
      - airbyte-server
    ports:
      - "8001:80" # Porta da UI do Airbyte
    restart: unless-stopped

  airbyte-worker:
    image: airbyte/worker:${AIRBYTE_VERSION:-0.50.46}
    container_name: airbyte_worker
    depends_on:
      - airbyte-server
      - airbyte-temporal
    environment:
      - AIRBYTE_VERSION=${AIRBYTE_VERSION:-0.50.46}
      - CONFIG_ROOT=/configs
      - WORKSPACE_ROOT=/workspace
      - TEMPORAL_HOST=airbyte-temporal:7233
      - WORKER_ENVIRONMENT=docker
    volumes:
      - airbyte_configs:/configs
      - airbyte_workspace:/workspace
      - /var/run/docker.sock:/var/run/docker.sock # Necessário para o worker lançar jobs Docker
    restart: unless-stopped

  dbt_runner:
    image: ghcr.io/dbt-labs/dbt-postgres:1.7-latest # Use a versão mais recente do dbt para postgres
    container_name: dbt_runner_container
    volumes:
      - ./dbt_project:/usr/app/dbt_project # Mapeia o projeto DBT local para o container
      - ./dbt_profiles:/root/.dbt # Mapeia o profiles.yml
    environment:
      - DBT_DB_HOST=postgres_source_db
      - DBT_DB_USER=${POSTGRES_SOURCE_USER:-user_source}
      - DBT_DB_PASSWORD=${POSTGRES_SOURCE_PASSWORD:-password_source}
      - DBT_DB_NAME=${POSTGRES_SOURCE_DB:-db_source}
      - DBT_DB_PORT=5432
    working_dir: /usr/app/dbt_project
    # O comando pode ser sobrescrito para executar dbt run, dbt test, etc.
    # Ex: docker-compose run dbt_runner dbt run
    command: ["tail", "-f", "/dev/null"] # Mantém o container rodando para execuções interativas
    depends_on:
      postgres_source:
        condition: service_healthy # Garante que o postgres_source esteja pronto

  # Serviços do Airflow
  airflow-postgres:
    image: postgres:13
    container_name: airflow_postgres
    environment:
      POSTGRES_USER: ${AIRFLOW_DB_USER:-airflow}
      POSTGRES_PASSWORD: ${AIRFLOW_DB_PASSWORD:-airflow}
      POSTGRES_DB: ${AIRFLOW_DB_NAME:-airflow}
    volumes:
      - airflow_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    ports:
      - "5433:5432" # Usando uma porta diferente para não conflitar com postgres_source

  airflow-init:
    image: apache/airflow:2.7.1-python3.9
    container_name: airflow_init
    depends_on:
      airflow-postgres:
        condition: service_healthy
    environment:
      - AIRFLOW_DB_USER=${AIRFLOW_DB_USER:-airflow}
      - AIRFLOW_DB_PASSWORD=${AIRFLOW_DB_PASSWORD:-airflow}
      - AIRFLOW_DB_NAME=${AIRFLOW_DB_NAME:-airflow}
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${AIRFLOW_DB_USER:-airflow}:${AIRFLOW_DB_PASSWORD:-airflow}@airflow-postgres/${AIRFLOW_DB_NAME:-airflow}
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=True
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - _AIRFLOW_DB_UPGRADE=true
      - _AIRFLOW_WWW_USER_CREATE=true
      - _AIRFLOW_WWW_USER_USERNAME=airflow
      - _AIRFLOW_WWW_USER_PASSWORD=airflow
    command: version
    entrypoint:
      - /bin/bash
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\033[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$(($(getconf _PHYS_PAGES) * $(getconf PAGE_SIZE) / one_meg))
        cpus_available=$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$(df / | tail -1 | awk '{print $4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\033[0m"
          echo "At least 4GB of memory required. You have $(numfmt --to iec $((mem_available * one_meg)))"
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\033[0m"
          echo "At least 2 CPUs recommended. You have ${cpus_available}"
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\033[0m"
          echo "At least 10 GBs recommended. You have $(numfmt --to iec $((disk_available * 1024 )))"
          warning_resources="true"
        fi
        if [[ ${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow!\033[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version

  airflow-webserver:
    image: apache/airflow:2.7.1-python3.9
    container_name: airflow_webserver
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    environment:
      - AIRFLOW_DB_USER=${AIRFLOW_DB_USER:-airflow}
      - AIRFLOW_DB_PASSWORD=${AIRFLOW_DB_PASSWORD:-airflow}
      - AIRFLOW_DB_NAME=${AIRFLOW_DB_NAME:-airflow}
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${AIRFLOW_DB_USER:-airflow}:${AIRFLOW_DB_PASSWORD:-airflow}@airflow-postgres/${AIRFLOW_DB_NAME:-airflow}
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=True
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__API__AUTH_BACKENDS=airflow.api.auth.backend.basic_auth
      # Configurações para conectar com outros serviços
      - AIRBYTE_HOST=airbyte-server
      - AIRBYTE_PORT=8000
      - DBT_PROJECT_DIR=/opt/airflow/dbt_project
    volumes:
      - ./airflow_dags:/opt/airflow/dags
      - airflow_logs:/opt/airflow/logs
      - airflow_plugins:/opt/airflow/plugins
      - ./dbt_project:/opt/airflow/dbt_project # Compartilha projeto dbt com o Airflow
      - ./airflow_dags/requirements:/opt/airflow/requirements
      - ./scripts:/app/scripts # Compartilha os scripts para popular o banco de dados
    ports:
      - "8080:8080"
    restart: unless-stopped
    command: >
      bash -c "pip install -r /opt/airflow/requirements/requirements.txt &&
              airflow webserver"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  airflow-scheduler:
    image: apache/airflow:2.7.1-python3.9
    container_name: airflow_scheduler
    depends_on:
      airflow-webserver:
        condition: service_healthy
    environment:
      - AIRFLOW_DB_USER=${AIRFLOW_DB_USER:-airflow}
      - AIRFLOW_DB_PASSWORD=${AIRFLOW_DB_PASSWORD:-airflow}
      - AIRFLOW_DB_NAME=${AIRFLOW_DB_NAME:-airflow}
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${AIRFLOW_DB_USER:-airflow}:${AIRFLOW_DB_PASSWORD:-airflow}@airflow-postgres/${AIRFLOW_DB_NAME:-airflow}
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=True
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      # Configurações para conectar com outros serviços
      - AIRBYTE_HOST=airbyte-server
      - AIRBYTE_PORT=8000
      - DBT_PROJECT_DIR=/opt/airflow/dbt_project
    volumes:
      - ./airflow_dags:/opt/airflow/dags
      - airflow_logs:/opt/airflow/logs
      - airflow_plugins:/opt/airflow/plugins
      - ./dbt_project:/opt/airflow/dbt_project # Compartilha projeto dbt com o Airflow
      - ./airflow_dags/requirements:/opt/airflow/requirements
      - ./scripts:/app/scripts # Compartilha os scripts para popular o banco de dados
    restart: unless-stopped
    command: >
      bash -c "pip install -r /opt/airflow/requirements/requirements.txt &&
              airflow scheduler"

  # Container para configurar automaticamente as conexões do Airflow após o webserver estar disponível
  airflow-setup:
    image: apache/airflow:2.7.1-python3.9
    container_name: airflow_setup
    depends_on:
      airflow-webserver:
        condition: service_healthy
    environment:
      - AIRFLOW_DB_USER=${AIRFLOW_DB_USER:-airflow}
      - AIRFLOW_DB_PASSWORD=${AIRFLOW_DB_PASSWORD:-airflow}
      - AIRFLOW_DB_NAME=${AIRFLOW_DB_NAME:-airflow}
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${AIRFLOW_DB_USER:-airflow}:${AIRFLOW_DB_PASSWORD:-airflow}@airflow-postgres/${AIRFLOW_DB_NAME:-airflow}
      - AIRBYTE_HOST=airbyte-server
      - AIRBYTE_PORT=8000
    volumes:
      - ./airflow_dags:/opt/airflow/dags
      - ./airflow_dags/setup_connections.sh:/setup_connections.sh
    entrypoint: ["/bin/bash", "/setup_connections.sh"]
    restart: on-failure

volumes:
  postgres_source_data:
  airbyte_db_data:
  airbyte_temporal_data:
  airbyte_configs:
  airbyte_workspace:
  airflow_postgres_data:
  airflow_logs:
  airflow_plugins: